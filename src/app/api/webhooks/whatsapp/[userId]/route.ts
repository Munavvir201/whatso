\nimport { NextRequest, NextResponse } from \'next/server\';\nimport { automateWhatsAppChat } from \'@/ai/flows/automate-whatsapp-chat\';\n\n// NOTE: You must configure the Firebase Admin SDK for this to work.\n// This involves setting up service account credentials in your deployment environment.\nimport { db } from \'@/lib/firebase-admin\';\n\n\n/**\n * Handles webhook verification from Meta.\n * https://developers.facebook.com/docs/graph-api/webhooks/getting-started#verification-requests\n */\nexport async function GET(req: NextRequest, { params }: { params: { userId: string } }) {\n  const { userId } = params;\n  const { searchParams } = new URL(req.url);\n  const mode = searchParams.get(\'hub.mode\');\n  const challenge = searchParams.get(\'hub.challenge\');\n  const token = searchParams.get(\'hub.verify_token\');\n\n  console.log(\'Meta webhook verification request received for userId:\', userId);\n\n  if (!mode || !challenge || !token) {\n    console.error(\'Missing required query parameters for webhook verification\');\n    return NextResponse.json({ error: \'Missing required parameters\' }, { status: 400 });\n  }\n  \n  try {\n    const userSettingsRef = db.collection(\'userSettings\').doc(userId);\n    const docSnap = await userSettingsRef.get();\n\n    if (!docSnap.exists()) {\n        console.error(`Settings not found for user ${userId}. Cannot verify webhook.`);\n        return NextResponse.json({ error: \'User settings not found\' }, { status: 404 });\n    }\n    const whatsappSettings = docSnap.data()?.whatsapp;\n\n    if (!whatsappSettings?.webhookSecret) {\n        console.error(`Webhook secret not found for user ${userId}.`);\n         return NextResponse.json({ error: \'Webhook secret not configured\' }, { status: 400 });\n    }\n\n    if (mode === \'subscribe\' && token === whatsappSettings.webhookSecret) {\n      await userSettingsRef.set({\n          whatsapp: {\n              ...whatsappSettings,\n              status: \'verified\'\n          }\n      }, { merge: true });\n      \n      console.log(`âœ… Webhook verified successfully for userId: ${userId}`);\n      return new NextResponse(challenge, { \n        status: 200, \n        headers: { \'Content-Type\': \'text/plain\' } \n      });\n    } else {\n      console.error(`Webhook verification failed for user ${userId}. Token mismatch.`);\n      return NextResponse.json({ error: \'Verification failed - token mismatch\' }, { status: 403 });\n    }\n  } catch (error) {\n    console.error(`Error during webhook verification for user ${userId}:\`, error);\n    return NextResponse.json({ error: \'Internal server error during verification\' }, { status: 500 });\n  }\n}\n\n\n/**\n * Handles incoming messages from WhatsApp.\n */\nexport async function POST(req: NextRequest, { params }: { params: { userId: string } }) {\n    const { userId } = params;\n    const body = await req.json();\n\n    // Log the incoming webhook body for debugging\n    console.log(\'WhatsApp webhook received:\', JSON.stringify(body, null, 2));\n\n    // Basic validation of the incoming payload\n    if (body.object !== \'whatsapp_business_account\') {\n        console.log(\'Not a WhatsApp business account message\');\n        return NextResponse.json({ status: \'not a whatsapp message\' }, { status: 200 });\n    }\n    \n    const message = body.entry?.[0]?.changes?.[0]?.value?.messages?.[0];\n\n    if (!message) {\n        console.log(\'No message found in webhook payload\');\n        return NextResponse.json({ status: \'no message found\' }, { status: 200 });\n    }\n\n    // Return 200 quickly as requested, then process asynchronously\n    const response = NextResponse.json({ status: \'ok\' }, { status: 200 });\n\n    // Process the message asynchronously (don\'t await)\n    processMessageAsync(userId, message, body);\n\n    return response;\n}\n\n/**\n * Process WhatsApp message asynchronously\n */\nasync function processMessageAsync(userId: string, message: any, body: any) {\n    try {\n        // Fetch user credentials\n        const userSettingsRef = db.collection(\'userSettings\').doc(userId);\n        const docSnap = await userSettingsRef.get();\n\n        if (!docSnap.exists()) {\n            console.error(`Settings not found for user ${userId}. Cannot process message.`);\n            return;\n        }\n        const whatsappSettings = docSnap.data()?.whatsapp;\n\n        if (!whatsappSettings?.phoneNumberId || !whatsappSettings?.accessToken) {\n            console.error(`Missing WhatsApp credentials for user ${userId}.`);\n            return;\n        }\n\n        // Only process text messages for now\n        if (!message.text?.body) {\n            console.log(\'Message is not a text message, skipping AI processing\');\n            return;\n        }\n\n        // TODO: In a real app, you would store and retrieve conversation history\n        const conversationHistory = "User: " + message.text.body;\n\n        // Get AI response\n        const aiResponse = await automateWhatsAppChat({\n            message: message.text.body,\n            conversationHistory: conversationHistory,\n        });\n\n        // Send the AI response back to the user via WhatsApp API\n        await fetch(`https://graph.facebook.com/v20.0/${whatsappSettings.phoneNumberId}/messages`, {\n            method: \'POST\',\n            headers: {\n                \'Authorization\': `Bearer ${whatsappSettings.accessToken}`,\n                \'Content-Type\': \'application/json\',\n            },\n            body: JSON.stringify({\n                messaging_product: \'whatsapp\',\n                to: message.from,\n                text: { body: aiResponse.response },\n            }),\n        });\n\n        console.log(\'Successfully sent AI response to WhatsApp user\');\n\n    } catch (error) {\n        console.error("Error processing message and sending reply:", error);\n    }\n}\n